# This is a basic workflow to help you get started with Actions

name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  repository_dispatch:
    types: [RancherK8s]

jobs:
  deploy:
    runs-on: ubuntu-latest  # Runs on GitHub-hosted runner

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v3

      - name: üõ†Ô∏è Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: üîç Debug - List Files and Current Directory
        run: |
          echo "üîç Current Directory:"
          pwd  # Print working directory

          echo "üìÇ Listing all files in the repository:"
          ls -R  # List all files recursively

     # - name: üîë Configure Kubeconfig
     #   run: |
     #     mkdir -p $HOME/.kube  # Ensure .kube directory exists
     #     echo "${{ secrets.KUBECONFIG_BASE64 }}" > $HOME/.kube/ca.crt
     #     chmod 600 $HOME/.kube/ca.crt
          
    #      export KUBECONFIG=$GITHUB_WORKSPACE/config  # Explicitly set kubeconfig

          # ‚úÖ Debug: Print Kubeconfig Contents
    #      echo "üîç Debug: Kubeconfig File Contents:"
    #      cat $GITHUB_WORKSPACE/config

      - name: ‚ö†Ô∏è Disable TLS Verification for Local Cluster
        run: |
          export KUBECONFIG=$GITHUB_WORKSPACE/local.yaml
          echo "‚ö†Ô∏è Enabling --insecure-skip-tls-verify for 'local' cluster..."
          kubectl config set-cluster local --insecure-skip-tls-verify=true


          # ‚úÖ Debug: Check Namespaces
          echo "üîç Debug: Checking Namespaces..."
          kubectl get ns || echo "‚ùå Failed to fetch namespaces"

      - name: üîç Log event payload to a file
        run: echo '${{ toJson(github.event.client_payload) }}' > event_payload.json

      - name: üîç Print JSON payload for debugging
        run: |
          echo "üìÇ Listing all files:"
          ls -l
          echo "üìÑ JSON Payload Content:"
          cat event_payload.json

      - name: Extract metadata for Docker image name
        run: |
          # Extract values from JSON
          ORG_ID=$(jq -r '.data.organizationID' event_payload.json)
          SUB_ORG_ID=$(jq -r '.data.subOrganizationID' event_payload.json)
          ENV_ID=$(jq -r '.data.enviromentID' event_payload.json)
          GRAPH_ID=$(jq -r '.data.graphID' event_payload.json)
          VERSION=$(jq -r '.data.version' event_payload.json)

          # Validate extracted values
          if [[ -z "$ORG_ID" || -z "$SUB_ORG_ID" || -z "$ENV_ID" || -z "$GRAPH_ID" || -z "$VERSION" ]]; then
            echo "üö® Error: One or more required fields are missing!"
            exit 1
          fi

          # Generate Docker Image Name
          IMAGE_NAME="ravi8881/${ORG_ID}-${SUB_ORG_ID}-${ENV_ID}-${GRAPH_ID}:${VERSION}"
          IMAGE_NAME=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]' | tr -d ' ' | tr '/' '-')

      - name: üîÑ Clone solr-docker repository with dynamic branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract branch name from payload
          BRANCH_NAME=$(jq -r '.data.organizationID' event_payload.json)

          # Validate
          if [[ -z "$BRANCH_NAME" ]]; then
            echo "üö® Error: branchName is missing in payload!"
            exit 1
          fi

          echo "üîÅ Cloning branch: $BRANCH_NAME"

          # Clone the solr-docker repo with the provided branch
          git clone --single-branch --branch "$BRANCH_NAME" \
            https://x-access-token:${GITHUB_TOKEN}@github.com/ravi-dhyani8881/solr-docker.git solr-docker

          # List contents
          ls -la solr-docker

      - name: ‚úÖ Ensure namespace exists from ORG_ID
        run: |
          export KUBECONFIG=$GITHUB_WORKSPACE/local.yaml
          ORG_ID=$(jq -r '.data.organizationID' event_payload.json)
          echo "Resolved ORG_ID: $ORG_ID"
      
          if ! kubectl get namespace "$ORG_ID" >/dev/null 2>&1; then
            echo "Namespace '$ORG_ID' does not exist. Creating..."
            kubectl create namespace "$ORG_ID"
          else
            echo "Namespace '$ORG_ID' already exists. Skipping creation."
          fi

      - name: üìÇ Navigate into dynamic subdirectory
        run: |
          SUB_ORG_ID=$(jq -r '.data.subOrganizationID' event_payload.json)
          ENV_ID=$(jq -r '.data.enviromentID' event_payload.json)
          GRAPH_ID=$(jq -r '.data.graphID' event_payload.json)

          # Validate
          if [[ -z "$SUB_ORG_ID" || -z "$ENV_ID" || -z "$GRAPH_ID" ]]; then
            echo "üö® Error: One or more folder names are missing!"
            exit 1
          fi

          TARGET_PATH="solr-docker/$SUB_ORG_ID/$ENV_ID/$GRAPH_ID"

          echo "üìÅ Changing into: $TARGET_PATH"

          if [[ -d "$TARGET_PATH" ]]; then
            cd "$TARGET_PATH"
            ls -la
          else
            echo "‚ùå Directory $TARGET_PATH does not exist!"
            exit 1
          fi
      
      - name: üöÄ Apply Kubernetes Manifests
        run: |
          export KUBECONFIG=$GITHUB_WORKSPACE/local.yaml

          SUB_ORG_ID=$(jq -r '.data.subOrganizationID' event_payload.json)
          ENV_ID=$(jq -r '.data.enviromentID' event_payload.json)
          GRAPH_ID=$(jq -r '.data.graphID' event_payload.json)

          MANIFEST_DIR="solr-docker/$SUB_ORG_ID/$ENV_ID/$GRAPH_ID/kubernates"

          echo "üìÇ Applying manifests from: $MANIFEST_DIR"

          if [[ -d "$MANIFEST_DIR" ]]; then
            kubectl apply -f "$MANIFEST_DIR/pv.yaml"
            kubectl apply -f "$MANIFEST_DIR/pvc.yaml"
            kubectl apply -f "$MANIFEST_DIR/solr-deployment.yaml"
            kubectl apply -f "$MANIFEST_DIR/solr-service.yaml"
            kubectl apply -f "$MANIFEST_DIR/solr-ingress.yaml"
          else
            echo "‚ùå Manifest directory does not exist!"
            exit 1
          fi


          # Log and Export Variables
          echo "üöÄ Docker Image Name: $IMAGE_NAME"
          echo "DOCKER_IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: üß¨ Clone rest repository and deploy Spring Boot rest app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export KUBECONFIG=$GITHUB_WORKSPACE/local.yaml
          BRANCH_NAME=$(jq -r '.data.organizationID' event_payload.json)
          ORG_ID=$(jq -r '.data.organizationID' event_payload.json)
          Project_Name=$(jq -r '.data.projectName' event_payload.json)
          Enviroment_ID=$(jq -r '.data.enviromentID' event_payload.json)
          Sub_Organization_ID=$(jq -r '.data.subOrganizationID' event_payload.json)
          graphID=$(jq -r '.data.graphID' event_payload.json)
          
          echo "üì• Cloning graphql repo (default main branch)..."
          git clone --single-branch --branch "$BRANCH_NAME" \
          https://x-access-token:${GITHUB_TOKEN}@github.com/ravi-dhyani8881/rest.git $BRANCH_NAME
      
          echo "üìÇ Contents of rest repo:"
          ls -lthr
      
          MANIFEST_PATH="$BRANCH_NAME/$Sub_Organization_ID/$Enviroment_ID/$graphID/$Project_Name/kubernates"
      
          echo "üìÅ Looking for manifests in: $MANIFEST_PATH"
      
          if [[ -d "$MANIFEST_PATH" ]]; then
            echo "üìÑ Files in $MANIFEST_PATH:"
            ls -l "$MANIFEST_PATH"
      
            kubectl apply -f "$MANIFEST_PATH/rest-deployment.yaml" -n "$ORG_ID"
            kubectl apply -f "$MANIFEST_PATH/rest-service.yaml" -n "$ORG_ID"
            kubectl apply -f "$MANIFEST_PATH/rest-ingress.yaml" -n "$ORG_ID"
          else
            echo "‚ùå Directory $MANIFEST_PATH does not exist!"
            exit 1
          fi

      - name: üß¨ Clone graphql repository and deploy Spring Boot Graphql app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export KUBECONFIG=$GITHUB_WORKSPACE/local.yaml
      
          echo "üì• Cloning graphql repo (default main branch)..."
          git clone https://x-access-token:${GITHUB_TOKEN}@github.com/ravi-dhyani8881/graphql.git graphql
      
          echo "üìÇ Contents of graphql repo:"
          find graphql
      
          PROJECT_NAME=$(jq -r '.data.projectName' event_payload.json)
          MANIFEST_PATH="graphql/$PROJECT_NAME/kubernates"
      
          echo "üìÅ Looking for manifests in: $MANIFEST_PATH"
      
          if [[ -d "$MANIFEST_PATH" ]]; then
            echo "üìÑ Files in $MANIFEST_PATH:"
            ls -l "$MANIFEST_PATH"
      
            kubectl apply -f "$MANIFEST_PATH/springboot-deployment.yaml"
            kubectl apply -f "$MANIFEST_PATH/springboot-service.yaml"
            kubectl apply -f "$MANIFEST_PATH/springboot-ingress.yaml"
          else
            echo "‚ùå Directory $MANIFEST_PATH does not exist!"
            exit 1
          fi

      - name: Call remote API after build is complete
        if: ${{ success() }}
        run: |
          ID=$(jq -r '.client_payload.data.ID' event_payload.json)
          echo "‚úÖ Extracted ID: $ID"
          domain=$(jq -r '.client_payload.data.domain' event_payload.json)
          echo "‚úÖ Extracted domain: $domain"
          curl --location --request PUT 'https://chief-snake-exciting.ngrok-free.app/febe/graphVersions/updateContent' \
            --header 'Content-Type: application/json' \
            --header 'X-API-Key: 4dec1823-fde8-45c6-8413-8aa8eae04e56' \
            --header 'X-USER-ID: 7832be86-6fc6-4234-a0bf-46403ac7ada9' \
            --data @- <<EOF
          {
            "ID": "${ID}",
            "domain": { "set": "${domain}" },
            
            "isDeployed": { "set": "true" }
          }
          EOF
