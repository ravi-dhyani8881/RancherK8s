# This is a basic workflow to help you get started with Actions

name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  repository_dispatch:
    types: [RancherK8s]

jobs:
  deploy:
    runs-on: ubuntu-latest  # Runs on GitHub-hosted runner

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v3

      - name: 🛠️ Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: 🔍 Debug - List Files and Current Directory
        run: |
          echo "🔍 Current Directory:"
          pwd  # Print working directory

          echo "📂 Listing all files in the repository:"
          ls -R  # List all files recursively

     # - name: 🔑 Configure Kubeconfig
     #   run: |
     #     mkdir -p $HOME/.kube  # Ensure .kube directory exists
     #     echo "${{ secrets.KUBECONFIG_BASE64 }}" > $HOME/.kube/ca.crt
     #     chmod 600 $HOME/.kube/ca.crt
          
    #      export KUBECONFIG=$GITHUB_WORKSPACE/config  # Explicitly set kubeconfig

          # ✅ Debug: Print Kubeconfig Contents
    #      echo "🔍 Debug: Kubeconfig File Contents:"
    #      cat $GITHUB_WORKSPACE/config

      - name: ⚠️ Disable TLS Verification for Local Cluster
        run: |
          export KUBECONFIG=$GITHUB_WORKSPACE/local.yaml
          echo "⚠️ Enabling --insecure-skip-tls-verify for 'local' cluster..."
          kubectl config set-cluster local --insecure-skip-tls-verify=true


          # ✅ Debug: Check Namespaces
          echo "🔍 Debug: Checking Namespaces..."
          kubectl get ns || echo "❌ Failed to fetch namespaces"

      - name: 🔍 Log event payload to a file
        run: echo '${{ toJson(github.event.client_payload) }}' > event_payload.json

      - name: 🔍 Print JSON payload for debugging
        run: |
          echo "📂 Listing all files:"
          ls -l
          echo "📄 JSON Payload Content:"
          cat event_payload.json

      - name: Extract metadata for Docker image name
        run: |
          # Extract values from JSON
          ORG_ID=$(jq -r '.organizationID' event_payload.json)
          SUB_ORG_ID=$(jq -r '.subOrganizationID' event_payload.json)
          ENV_ID=$(jq -r '.enviromentID' event_payload.json)
          GRAPH_ID=$(jq -r '.graphID' event_payload.json)
          VERSION=$(jq -r '.version' event_payload.json)

          # Validate extracted values
          if [[ -z "$ORG_ID" || -z "$SUB_ORG_ID" || -z "$ENV_ID" || -z "$GRAPH_ID" || -z "$VERSION" ]]; then
            echo "🚨 Error: One or more required fields are missing!"
            exit 1
          fi

          # Generate Docker Image Name
          IMAGE_NAME="ravi8881/${ORG_ID}-${SUB_ORG_ID}-${ENV_ID}-${GRAPH_ID}:${VERSION}"
          IMAGE_NAME=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]' | tr -d ' ' | tr '/' '-')

          # Log and Export Variables
          echo "🚀 Docker Image Name: $IMAGE_NAME"
          echo "DOCKER_IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
